# NAMESPACES
---
apiVersion: v1
kind: Namespace
metadata:
  name: logging
---
apiVersion: v1
kind: Namespace
metadata:
  name: elastic-system

# ECK OPERATOR
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-operator
  namespace: elastic-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-operator
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets", "persistentvolumeclaims", "events", "namespaces"]
  verbs: ["*"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets"]
  verbs: ["*"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["*"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["*"]
- apiGroups: ["elasticsearch.k8s.elastic.co", "kibana.k8s.elastic.co"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-operator
subjects:
- kind: ServiceAccount
  name: elastic-operator
  namespace: elastic-system
roleRef:
  kind: ClusterRole
  name: elastic-operator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elastic-operator
  namespace: elastic-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elastic-operator
  template:
    metadata:
      labels:
        app: elastic-operator
    spec:
      serviceAccountName: elastic-operator
      containers:
      - name: operator
        image: docker.elastic.co/eck/eck-operator:2.16.0
        env:
        - name: OPERATOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NAMESPACES
          value: "logging"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"

# ELASTICSEARCH
---
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: quickstart
  namespace: logging
spec:
  version: 8.15.0
  nodeSets:
  - name: default
    count: 2
    config:
      node.store.allow_mmap: false
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: 2Gi

# KIBANA
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: quickstart
  namespace: logging
spec:
  version: 8.15.0
  count: 1
  elasticsearchRef:
    name: quickstart

# LOGSTASH
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: logging
data:
  logstash.conf: |
    input { beats { port => 5044 } }
    output {
      elasticsearch {
        hosts => ["quickstart-es-http.logging.svc.cluster.local:9200"]
        index => "logs-%{+YYYY.MM.dd}"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.15.0
        env:
        - name: LS_JAVA_OPTS
          value: "-Xmx512m -Xms512m"
        volumeMounts:
        - name: config
          mountPath: /usr/share/logstash/pipeline
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
      volumes:
      - name: config
        configMap:
          name: logstash-config

# NEXT.JS APP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: next-argo
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: next-argo
  template:
    metadata:
      labels:
        app: next-argo
    spec:
      containers:
      - name: next-argo
        image: muhammadnoor/next-argo:latest
        ports:
        - containerPort: 3000
        imagePullPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: next-argo
  namespace: default
spec:
  selector:
    app: next-argo
  ports:
    - port: 80
      targetPort: 3000
  type: ClusterIP

# FILEBEAT
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: default
data:
  filebeat.yml: |
    filebeat.inputs:
    - type: container
      paths:
        - /var/lib/docker/containers/*/*.log
    output.logstash:
      hosts: ["logstash.logging.svc.cluster.local:5044"]
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: default
spec:
  selector:
    matchLabels:
      app: filebeat
  template:
    metadata:
      labels:
        app: filebeat
    spec:
      serviceAccountName: filebeat
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:8.15.0
        args: ["-c", "/etc/filebeat.yml", "-e"]
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          subPath: filebeat.yml
        - name: varlibdocker
          mountPath: /var/lib/docker/containers
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: filebeat-config
      - name: varlibdocker
        hostPath:
          path: /var/lib/docker/containers
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: default

# KIBANA SERVICE
---
apiVersion: v1
kind: Service
metadata:
  name: kibana-nodeport
  namespace: logging
spec:
  type: NodePort
  selector:
    kibana.k8s.elastic.co/name: quickstart
  ports:
    - port: 5601
      targetPort: 5601
      nodePort: 30001

# LOGSTASH SERVICE
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: logging
spec:
  selector:
    app: logstash
  ports:
    - port: 5044
      targetPort: 5044